
line_follower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000100  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002c4  00000000  00000000  0000018f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e6  00000000  00000000  00000453  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000275  00000000  00000000  00000539  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000007b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c9  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000170  00000000  00000000  00000899  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000a09  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
#include<util/delay.h>
void main()
{
	DDRD=0b00000000;
  6c:	11 ba       	out	0x11, r1	; 17
	DDRB=0b11111111;
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	87 bb       	out	0x17, r24	; 23
	PORTB=0b11111111;
  72:	88 bb       	out	0x18, r24	; 24
	
	while(1)
	{
	
		PORTB=0b00001010;
  74:	4a e0       	ldi	r20, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  76:	29 e1       	ldi	r18, 0x19	; 25
  78:	30 e0       	ldi	r19, 0x00	; 0
		_delay_ms(5000);
		PORTB=0b00000110;
  7a:	66 e0       	ldi	r22, 0x06	; 6
		PORTB=0b00001010;
		_delay_ms(5000);
		
		PORTB=0b00001001;
  7c:	59 e0       	ldi	r21, 0x09	; 9
		
		PORTB=0b00001001;
		PORTB=0b00001010;
		_delay_ms(5000);
		
		PORTB=0b00000101;
  7e:	75 e0       	ldi	r23, 0x05	; 5
	PORTB=0b11111111;
	
	while(1)
	{
	
		PORTB=0b00001010;
  80:	48 bb       	out	0x18, r20	; 24
  82:	80 e5       	ldi	r24, 0x50	; 80
  84:	93 ec       	ldi	r25, 0xC3	; 195
  86:	f9 01       	movw	r30, r18
  88:	31 97       	sbiw	r30, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <main+0x1c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  8c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  8e:	d9 f7       	brne	.-10     	; 0x86 <main+0x1a>
		_delay_ms(5000);
		PORTB=0b00000110;
  90:	68 bb       	out	0x18, r22	; 24
		PORTB=0b00001010;
  92:	48 bb       	out	0x18, r20	; 24
  94:	80 e5       	ldi	r24, 0x50	; 80
  96:	93 ec       	ldi	r25, 0xC3	; 195
  98:	f9 01       	movw	r30, r18
  9a:	31 97       	sbiw	r30, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <main+0x2e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  9e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a0:	d9 f7       	brne	.-10     	; 0x98 <main+0x2c>
		_delay_ms(5000);
		
		PORTB=0b00001001;
  a2:	58 bb       	out	0x18, r21	; 24
		PORTB=0b00001010;
  a4:	48 bb       	out	0x18, r20	; 24
  a6:	80 e5       	ldi	r24, 0x50	; 80
  a8:	93 ec       	ldi	r25, 0xC3	; 195
  aa:	f9 01       	movw	r30, r18
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <main+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  b0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  b2:	d9 f7       	brne	.-10     	; 0xaa <main+0x3e>
		_delay_ms(5000);
		
		PORTB=0b00000110;
  b4:	68 bb       	out	0x18, r22	; 24
		PORTB=0b00001010;
  b6:	48 bb       	out	0x18, r20	; 24
  b8:	80 e5       	ldi	r24, 0x50	; 80
  ba:	93 ec       	ldi	r25, 0xC3	; 195
  bc:	f9 01       	movw	r30, r18
  be:	31 97       	sbiw	r30, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <main+0x52>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c4:	d9 f7       	brne	.-10     	; 0xbc <main+0x50>
		_delay_ms(5000);
		
		PORTB=0b00001001;
  c6:	58 bb       	out	0x18, r21	; 24
		PORTB=0b00001010;
  c8:	48 bb       	out	0x18, r20	; 24
  ca:	80 e5       	ldi	r24, 0x50	; 80
  cc:	93 ec       	ldi	r25, 0xC3	; 195
  ce:	f9 01       	movw	r30, r18
  d0:	31 97       	sbiw	r30, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x64>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d6:	d9 f7       	brne	.-10     	; 0xce <main+0x62>
		_delay_ms(5000);
		
		PORTB=0b00000101;
  d8:	78 bb       	out	0x18, r23	; 24
  da:	88 e8       	ldi	r24, 0x88	; 136
  dc:	93 e1       	ldi	r25, 0x13	; 19
  de:	f9 01       	movw	r30, r18
  e0:	31 97       	sbiw	r30, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <main+0x74>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e6:	d9 f7       	brne	.-10     	; 0xde <main+0x72>
		_delay_ms(500);
		PORTB=0b00000110;
  e8:	68 bb       	out	0x18, r22	; 24
		PORTB=0b00001001;
  ea:	58 bb       	out	0x18, r21	; 24
  ec:	80 e5       	ldi	r24, 0x50	; 80
  ee:	93 ec       	ldi	r25, 0xC3	; 195
  f0:	f9 01       	movw	r30, r18
  f2:	31 97       	sbiw	r30, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <main+0x86>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f8:	d9 f7       	brne	.-10     	; 0xf0 <main+0x84>
  fa:	c2 cf       	rjmp	.-124    	; 0x80 <main+0x14>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
